@use "sass:math";

@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}
//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);
	// Ночальное и конечное значение в REM
	$minSizeValue: rem($minSize);
	$startSizeValue: rem($startSize);
	// Пересчитываем переменные относительно
	// размера шрифта по умолчанию
	$minWidth: math.div($minWidth, 16);
	$maxWidth: math.div($maxWidth, 16);
	$containerWidth: math.div($containerWidth, 16);
	$addSize: math.div($startSize - $minSize, 16);
	$widthTo: math.div($widthTo, 16);
	$widthFrom: math.div($widthFrom, 16);
	// Если указано ограничение у контейнера,
	// либо указана стартовая или конечная ширина
	// включаем режим работы в промежутке ширин
	@if ($maxWidthContainer > 0 or $widthFrom != $containerWidth or $widthTo != $minWidth) and $widthFrom > $widthTo {
		// Если стартовая ширина равна ширине контейнера + отступы,
		// или указана настройка "keepSize" ставим значение
		// по умолчанию равное стартовому размеру
		@if $widthFrom == $containerWidth or $keepSize == 1 or $keepSize == 2 {
			@media (min-width: $widthFromMedia) {
				#{$property}: $startSizeValue;
			}
		}
		// Адаптируем размер в промежутке между указанными ширинами вьюпорта
		@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
			#{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$widthFrom - $widthTo}))));
		}
		// Если конечная ширина равна минимальной ширине
		// или указана настройка "keepSize" ставим значение
		// по умолчанию равное конечному размеру
		@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
			@media (max-width: $widthToMedia) {
				#{$property}: $minSizeValue;
			}
		}
	} @else {
		// Режим работы по всей ширине вьюпорта
		#{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$maxWidth - $widthTo}))));
	}
}

$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1440;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1160;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

// Ширина страбатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;


:root {
	--container-width: 1160px;
	--container-padding: 1rem;

	--font-main: 'Manrope', sans-serif;
	--font-accent: 'Oranienbaum', serif;

	--page-bg: #f9f9ea;
	--text-color: #1F2B20;

	--line-height:1.375;

    --laptop-size: --container-width;
	--tablet-size: 991.98px;
	--mobile-size: 767.98px;
	--mobileSmall-size: 479.98px;
}
$pc: 1159.98px; // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: 991.98px; // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: 767.98px; // Телефоны L
$mobileSmall: 479.98px; // Телефоны S
.dark {
    --page-bg: #252526;
    --text-color: #fff;
}